{"version":3,"file":"static/js/362.3e682497.chunk.js","mappings":"+PACA,EAA+B,oC,SCqC/B,EA9BqB,WACnB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfJ,GAAW,GAFI,UAIWK,EAAAA,EAAAA,MAJX,gBAIPC,EAJO,EAIPA,QACRR,GAAS,SAAAS,GAAS,wBAAQA,IAAR,OAAsBD,GAAtB,IALH,gDAOfJ,EAAS,KAAMM,SAPA,yBASfR,GAAW,GATI,4EAAH,qDAYhBI,GACD,GAAE,KAGD,gCACGL,IAAW,wCACXE,IAAS,cAAGQ,UAAWC,EAAd,SAAoCT,KAC7C,SAACU,EAAA,EAAD,CAAkBd,MAAOA,MAG/B,EC9BD,EAJa,WACX,OAAO,SAAC,EAAD,GACR,C,oFCHD,GAAgB,KAAO,iCAAiC,KAAO,iCAAiC,MAAQ,mC,SCIlGc,EAAmB,SAAC,GAAc,IAAZd,EAAW,EAAXA,MACpBe,GAAWC,EAAAA,EAAAA,MAEXC,EAAWjB,EAAMkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACzB,SAAC,KAAD,CACER,UAAWC,EAAAA,KAEXQ,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAMR,GAJjB,UAME,eAAIH,UAAWC,EAAAA,KAAf,UACE,eAAID,UAAWC,EAAAA,MAAf,SAA8BO,OAL3BD,EAHkB,IAa3B,OAAO,eAAIP,UAAWC,EAAAA,KAAf,SAA6BI,GACrC,EAED,GAAeO,EAAAA,EAAAA,MAAKV,GAEpBA,EAAiBW,aAAe,CAC9BzB,MAAO,G,sLCzBH0B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAtB,EAAkB,mCAAG,sGACTkB,EAASK,IAAI,uBADJ,uBACxBC,EADwB,EACxBA,KADwB,kBAGzBA,GAHyB,2CAAH,qDAMlBC,EAAW,mCAAG,WAAMC,GAAN,yFACFR,EAASK,IAAI,gBAAiB,CACnDF,OAAQ,CACNM,MAAOD,KAHc,uBACjBF,EADiB,EACjBA,KADiB,kBAMlBA,GANkB,2CAAH,sDASXI,EAAY,mCAAG,WAAMjB,GAAN,yFACHO,EAASK,IAAT,iBAAuBZ,IADpB,uBAClBa,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZK,EAAmB,mCAAG,WAAMlB,GAAN,yFACVO,EAASK,IAAT,iBAAuBZ,EAAvB,aADU,uBACzBa,EADyB,EACzBA,KADyB,kBAE1BA,EAAKM,MAFqB,2CAAH,sDAKnBC,EAAmB,mCAAG,WAAMpB,GAAN,yFACVO,EAASK,IAAT,iBAAuBZ,EAAvB,aADU,uBACzBa,EADyB,EACzBA,KADyB,kBAE1BA,EAAKvB,SAFqB,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/modules/TradingToday/trading-today.module.scss?9c5d","modules/TradingToday/TradingToday.jsx","page/Home/Home.jsx","webpack://goit-react-hw-05-movies/./src/shared/components/TradingTodayList/trading-today-list.module.scss?cb64","shared/components/TradingTodayList/TradingTodayList.jsx","shared/services/posts-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"trading-today_errorMessage__6gnLJ\"};","import { useState, useEffect } from 'react';\n\nimport TradingTodayList from '../../shared/components/TradingTodayList/TradingTodayList';\n\nimport { TradingTodaySearch } from '../../shared/services/posts-api';\n\nimport styles from './trading-today.module.scss';\n\nconst TradingToday = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n\n        const { results } = await TradingTodaySearch();\n        setItems(prevItems => [...prevItems, ...results]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, []);\n\n  return (\n    <>\n      {loading && <p> ... loading</p>}\n      {error && <p className={styles.errorMessage}>{error}</p>}\n      {<TradingTodayList items={items} />}\n    </>\n  );\n};\n\nexport default TradingToday;\n","import TradingToday from '../../modules/TradingToday/TradingToday';\n\nconst Home = () => {\n  return <TradingToday />;\n};\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"trading-today-list_item__GzfYp\",\"link\":\"trading-today-list_link__AsQCJ\",\"title\":\"trading-today-list_title__iAXFE\"};","import { memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport styles from './trading-today-list.module.scss';\n\nconst TradingTodayList = ({ items}) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title }) => (\n    <Link\n      className={styles.link}\n      key={id}\n      to={`/movies/${id}`}\n      state={{ from: location }}\n    >\n      <li className={styles.item}>\n        <h4 className={styles.title}>{title}</h4>\n      </li>\n    </Link>\n  ));\n\n  return <ul className={styles.list}>{elements}</ul>;\n};\n\nexport default memo(TradingTodayList);\n\nTradingTodayList.defaultProps = {\n  items: [],\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e59553b70fe2fa353c5474cefb89bc6e',\n  },\n});\n\nexport const TradingTodaySearch = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n};\n\nexport const SearchMovie = async search => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query: search,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCreditsByMovieId = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviewsByMovieId = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["useState","items","setItems","loading","setLoading","error","setError","useEffect","fetchPosts","TradingTodaySearch","results","prevItems","message","className","styles","TradingTodayList","location","useLocation","elements","map","id","title","to","state","from","memo","defaultProps","instance","axios","baseURL","params","api_key","get","data","SearchMovie","search","query","getMovieById","getCreditsByMovieId","cast","getReviewsByMovieId"],"sourceRoot":""}